name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

env:
  # https://docs.python.org/3/using/cmdline.html#envvar-PYTHONLEGACYWINDOWSSTDIO
  PYTHONLEGACYWINDOWSSTDIO: utf-8
  # https://docs.python.org/3/using/cmdline.html#envvar-PYTHONIOENCODING
  PYTHONIOENCODING: utf-8

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8" # lowest supported version

      - name: Cache pre-commit envs
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit to lint files
        run: |
          pip install --upgrade pip
          pip install pre-commit
          pre-commit run --all-files

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        python:
          - "3.11"
          - "3.10"
          - "3.9"
          - "3.8"
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Setup Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
      - name: Setup `just`
        uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup `git`
        run: |
          git config --global user.email "user@example.com"
          git config --global user.name "User"

      - name: Load cached virtualenv
        id: load-cached-venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.load-cached-venv.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install self
        run: poetry install --no-interaction

      - name: Run tests
        run: just test

      - name: Debug failures
        if: ${{ failure() }}
        timeout-minutes: 60
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
