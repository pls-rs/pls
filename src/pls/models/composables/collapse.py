from __future__ import annotations

from functools import cached_property
from typing import TYPE_CHECKING

from pls.globals import args
from pls.models.tree import Tree

if TYPE_CHECKING:
    from pls.models.node import Node


class CollapseComp:
    """
    Adds functionality related to the collapsing of autogenerated files behind manually
    written ones.
    """

    def __init__(self, node: Node):
        self.node = node

    @cached_property
    def is_visible(self) -> bool:
        """whether the node deserves to be rendered to the screen"""

        is_tree_visible = not self.node.is_sub or args.args.collapse <= 1
        return is_tree_visible

    def find_main(self, node_map: dict[str, Node]):
        """
        Find the main node of this node from the mapping of node names and
        corresponding ``Node`` instances. If the spec specifies ``collapse`` and
        the main node exists, register this node as a sub-node of the main one.

        :param node_map: the mapping of names and ``Node`` instances
        """

        collapses = self.node.spec_comp.attr("collapse", coalesce=True)
        if not collapses:
            return

        for collapse in collapses:
            if "extension" in collapse:
                extension = collapse["extension"]
                name = self.node.name.replace(self.node.name_comp.ext, extension)
            else:  # "name" in collapse:
                name = collapse["name"]

            if (node := node_map.get(name)) is not None and node.is_visible:
                Tree.link(node, self.node)
                break  # A node can only have one parent.
